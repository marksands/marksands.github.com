<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Mark Sands</title>
		<description>Programming Tidbits</description>
		<link>http://marksands.github.io</link>
		<atom:link href="http://marksands.github.io/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>A Debugging Story</title>
				<description>&lt;h3&gt;Forward&lt;/h3&gt;

&lt;p&gt;The following is a synopsis of a crash that stumped my team for several days, and the process we took to investigate such bizarre behavior and ultimately diagnose and fix the problem. I&amp;#39;ll go over how we arrived at our solution and the debugging steps we took to get there. Hopefully by the end of the story you&amp;#39;ll have learned something along the way.&lt;/p&gt;

&lt;h3&gt;Unrecognized Selector Sent To Instance&lt;/h3&gt;

&lt;p&gt;It began with initializing Parse. A simple call to &lt;code&gt;[Parse setApplicationid:@&amp;quot;jumbledString&amp;quot; clientId:@&amp;quot;anotherString&amp;quot;];&lt;/code&gt; in the first line of &lt;code&gt;applicationDidFinishLaunching:withOptions:&lt;/code&gt;. This is very standard procedure, and the Parse documentation even says to do this. Unfortunately, the app would consistently crash on this line with &lt;code&gt;[__NSCFBoolean stringByReplacingOccurrencesOfString:withString:]: unrecognized selector sent to instance&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To make a long story short, I&amp;#39;ll leave out the obvious debugging tidbits and drive closer to the point.&lt;/p&gt;

&lt;p&gt;Using a different, older version of Parse.framework didn&amp;#39;t help either, so it was time to look at the stack trace more carefully to see where exactly the crash was happening. Here&amp;#39;s the relevant parts of the stack trace:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt; #0: `-[NSFileManager _URLForReplacingItemAtURL:error:]
 #1: `_NSCreateTemporaryFile_Protected + 404
 #2: `_NSWriteDataToFileWithExtendedAttributes + 276
 #3: `_NSWriteBytesToFileWithExtendedAttributes + 76
 #4: `writeStringToURLOrPath + 240
 #5: `-[NSString writeToFile:atomically:encoding:error:] +
 #6: `+[PFInternalUtils checkCacheApplicationId] + 700 at PFInternalUtils.m:239
 #7: `+[Parse setApplicationId:clientKey:] + 134 at Parse.m:54
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Register Read&lt;/h3&gt;

&lt;p&gt;I put a symbolic breakpoint on &lt;code&gt;-[NSString writeToFile:atomically:encoding:error:]&lt;/code&gt; to see if anything looked suspicious. When the breakpoint hit, I opened lldb and did a &lt;code&gt;register read&lt;/code&gt; to dump the assembly registers to see if anything stood out. Take a look:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(lldb) register read
General Purpose Registers:
        r0 = 0x0015f7b8  @&amp;quot;jumbledString&amp;quot;
        r1 = 0x29115a7b  &amp;quot;writeToFile:atomically:encoding:error:&amp;quot;
        r2 = 0x14641a30
        r3 = 0x00000001
        r4 = 0x14641a30
        r5 = 0x0015f7b8  @&amp;quot;anotherString&amp;quot;
        r6 = 0x00000000
        r7 = 0x0031d5ec
        r8 = 0x0014e996  &amp;quot;dataFilePath:&amp;quot;
        r9 = 0x00000000
       r10 = 0x14641000
       r11 = 0x290ea935  &amp;quot;fileExistsAtPath:&amp;quot;
       r12 = 0x2618d131  Foundation`-[NSString writeToFile:atomically:encoding:error:] + 1
        sp = 0x0031d5b8
        lr = 0x0012679d  Aerie`+[PFInternalUtils checkCacheApplicationId] + 701 at PFInternalUtils.m:239
        pc = 0x2618d130  Foundation`-[NSString writeToFile:atomically:encoding:error:]
      cpsr = 0x60000030
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Clearly it was writing something to file at a particular path, and that&amp;#39;s where things went awry. I figured if I could get the exact path it was writing to, and the contents, maybe I could bypass this check and Parse would magically work. Fortunately, register 10 had what we needed:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(lldb) po 0x14641000
/var/mobile/Containers/Data/Application/17F2392D-56EF-4259-84AD-1CD9EEA58E89/Library/Private Documents/Parse/applicationId
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I assumed applicationId was a file that held the applicationId string, for whatever reason. The existence of &lt;code&gt;fileExistsAtPath:&lt;/code&gt; in the registers led me to believe that if I created this file at this exact path, all would be well. So I got rid of the call to Parse, and temporarily replaced it with a series of commands to write the applicationId to a file at that location.&lt;/p&gt;

&lt;p&gt;Shockingly, I got the same crash &lt;code&gt;[__NSCFBoolean stringByReplacingOccurrencesOfString:withString:]: unrecognized selector sent to instance&lt;/code&gt;. Now this led me down an entirely different rabbit whole that I&amp;#39;ll spare you from (it involved POSIX file permissions, and chmodding a bunch of directories).&lt;/p&gt;

&lt;h3&gt;-[NSFileManager _URLForReplacingItemAtURL:error:]&lt;/h3&gt;

&lt;p&gt;I decided to open Hopper.app and look at the internals of &lt;code&gt;-[NSFileManager _URLForReplacingItemAtURL:error:]&lt;/code&gt;. Sure enough, I spotted a call to &lt;code&gt;stringByReplacingOccurrancesOfString:withString:&lt;/code&gt; halfway down the disassembled code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;    &lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CFBundleGetValueForInfoDictionaryKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CFBundleGetMainBundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&amp;quot;CFBundleName&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;var_16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;stringByReplacingOccurrencesOfString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;withString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This was the eureka moment I&amp;#39;d been waiting for. The rax register should be an &lt;code&gt;NSString&lt;/code&gt;, but it&amp;#39;s somehow getting converted to a boolean object. To make sure I wasn&amp;#39;t crazy, I copied &lt;code&gt;CFBundleGetValueForInfoDictionaryKey(CFBundleGetMainBundle(), @&amp;quot;CFBundleName&amp;quot;);&lt;/code&gt; into my AppDelegate to see what value was returned from the function. Calling print object on the &lt;code&gt;CFTypeRef&lt;/code&gt; gave me a plain old 0. I was curious what I would see when I looked at what was set on the BundleName of the Info.plist.&lt;/p&gt;

&lt;h3&gt;Corrupt Info.plist&lt;/h3&gt;

&lt;p&gt;Not surprisingly, the type column of the bundle name said Boolean and the value was NO. A quick revert to the plist and everything worked out great. I was pretty sure this was a mistake, so I checked the commit history to see if this whether always the case: &lt;code&gt;git log -p --follow Project/Info.plist&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span class=&quot;gu&quot;&gt;@@ -11,7 +11,7 @@&lt;/span&gt;
        &amp;lt;key&amp;gt;CFBundleInfoDictionaryVersion&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;6.0&amp;lt;/string&amp;gt;
        &amp;lt;key&amp;gt;CFBundleName&amp;lt;/key&amp;gt;
&lt;span class=&quot;gd&quot;&gt;-       &amp;lt;string&amp;gt;$(PRODUCT_NAME)&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+       &amp;lt;false/&amp;gt;&lt;/span&gt;
        &amp;lt;key&amp;gt;CFBundlePackageType&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;APPL&amp;lt;/string&amp;gt;
        &amp;lt;key&amp;gt;CFBundleShortVersionString&amp;lt;/key&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lo and behold, it was indeed an accident. But sometimes, accidents present the most interesting problems. Who knew that having a faulty bundle name would prevent you from writing files to disk?&lt;/p&gt;

&lt;p&gt;To recap: we started with a crash, a stack trace, inspecting registers, a poor attempt at monkey patching, disassembling Foundation using Hopper.app, and finally circling back to the corrupt Info.plist file. Careful eyes probably could have spotted this mistake by searching through the commit history, but that&amp;#39;s not always the case. At any rate, I had a lot of fun doing some code spelunking!&lt;/p&gt;
</description>
				<pubDate>Tue, 10 Feb 2015 00:00:00 -0600</pubDate>
				<link>http://marksands.github.io/2015/2/10/a-debugging-story.html</link>
				<guid isPermaLink="true">http://marksands.github.io/2015/2/10/a-debugging-story.html</guid>
			</item>
		
			<item>
				<title>Reacting to Reactive Cocoa Part IV</title>
				<description>&lt;h3&gt;Switching Gears&lt;/h3&gt;

&lt;p&gt;You may not be surprised when I say that I&amp;#39;m taking a break from learning Reactive Cocoa. Several of my coworkers are diving into swift, and with the imminent release of Reactive Cocoa 3.0, I decided to switch gears.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m going to recreate this app entirely in swift from the ground up. My hope is that after the project releases, then I can transition back to Reactive Cocoa using the newer version in swift.&lt;/p&gt;

&lt;p&gt;I think it&amp;#39;s a wiser decision overall, given how I&amp;#39;ll need to learn swift eventually. Reactive cocoa is transitioning over, so it just makes sense for me to transition over as well. Once I feel efficient enough, then I can pick up Reactive Cocoa once more.&lt;/p&gt;
</description>
				<pubDate>Sat, 07 Feb 2015 00:00:00 -0600</pubDate>
				<link>http://marksands.github.io/2015/2/7/reacting-to-reactive-cocoa-part-iv.html</link>
				<guid isPermaLink="true">http://marksands.github.io/2015/2/7/reacting-to-reactive-cocoa-part-iv.html</guid>
			</item>
		
			<item>
				<title>Reacting to Reactive Cocoa Part III</title>
				<description>&lt;h3&gt;Asynchronously Loading Images&lt;/h3&gt;

&lt;p&gt;One of my first endevours into the realm of expanding my &lt;code&gt;RACObserve&lt;/code&gt;-fu was to asynchronously load a &lt;code&gt;UIImage&lt;/code&gt; from an image URL that was returned from the movie API in order to populate thumbnails in table view cells. Historically, using &lt;code&gt;AFNetworking&lt;/code&gt;&amp;#39;s built-in mechanism or a third party caching library such as &lt;code&gt;SDWebImage&lt;/code&gt; would work perfectly fine, but I wanted to stick to my guns and fully gulp the Reactive Cocoa punch that I&amp;#39;ve so graciously poured.&lt;/p&gt;

&lt;p&gt;This one was hard. I gave it several attempts before finally coming to a working solution, but I never did find the answer I wanted.&lt;/p&gt;

&lt;h3&gt;Attempt 1&lt;/h3&gt;

&lt;p&gt;I never got my first attempt at this to work, but I&amp;#39;ll show the broken code nonetheless. I began my endevour by shamelessly stealing a code snippet from a project on GitHub called &lt;a href=&quot;https://github.com/ashfurrow/FunctionalReactivePixels/blob/aef9b670ec5f14d496049c9e214f99513ca579df/FRP/FRPPhotoImporter.m#L46-L58&quot;&gt;Functional Reactive Pixels&lt;/a&gt;. The code snippet is slightly different from what I ended up with, but the overal theme is the same: I create an &lt;code&gt;NSURLRequest&lt;/code&gt;, use the &lt;code&gt;rac_sendAsynchronousRequest&lt;/code&gt; category method, call &lt;code&gt;reduceEach&lt;/code&gt; to deflate the &lt;code&gt;RACTuple&lt;/code&gt; into the appropriate parameters, return the &lt;code&gt;NSData&lt;/code&gt; from the response, deliver the signal on the main thread, map the &lt;code&gt;NSData&lt;/code&gt; again to return the &lt;code&gt;UIImage&lt;/code&gt; form of the bytes, and eventually finish with a call to &lt;code&gt;publish&lt;/code&gt; and &lt;code&gt;autoconnect&lt;/code&gt; (whew!).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;    &lt;span class=&quot;n&quot;&gt;RAC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;posterImageView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACObserve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;movie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;posterURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;NSURLRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURLRequest&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;requestWithURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[[[[[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURLConnection&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;rac_sendAsynchronousRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;reduceEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURLResponse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;deliverOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACScheduler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mainThreadScheduler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
                &lt;span class=&quot;nl&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UIImage&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;imageWithData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;autoconnect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All of this made intuitive sense to me, except the final two methods &lt;code&gt;publish&lt;/code&gt; and &lt;code&gt;autoconnect&lt;/code&gt;. An inspection of &lt;code&gt;publish&lt;/code&gt; shows that it wraps a signal into a &lt;code&gt;RACMulticastConnection&lt;/code&gt; object, while the &lt;code&gt;autoconnect&lt;/code&gt; returns the multicast connection object as a signal. The recurring mystery object that kept creeping up was this &lt;code&gt;RACDisposable&lt;/code&gt; object that I hadn&amp;#39;t bothered, at least at this point, to investigate.&lt;/p&gt;

&lt;p&gt;Ultimately, this code never worked. Each time it ran, it would crash and throw this exception burried in the giant stack trace (have I mentioned how large the stack traces become when using Reactive Cocoa?):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;2015-01-07 20:23:12.809 BestMovieDeal[5998:117268] *** Terminating app due to uncaught exception &amp;#39;NSInvalidArgumentException&amp;#39;, reason: &amp;#39;-[RACDynamicSignal size]: unrecognized selector sent to instance 0x7f8ad1c6a180&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Attempt 2&lt;/h3&gt;

&lt;p&gt;My second try was to slim down my first approach, using only what I thought was absolutely necessary to make it work. I removed the final 3 lines of the block and returned the &lt;code&gt;UIImage&lt;/code&gt; instead of the &lt;code&gt;NSData&lt;/code&gt; object to be mapped over again and then returned as an image. This looked promising, but unfortunately gave me the identical stack trace as the first attempt.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;    &lt;span class=&quot;n&quot;&gt;RAC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;posterImageView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACObserve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;movie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;posterURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;NSURLRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURLRequest&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;requestWithURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURLConnection&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;rac_sendAsynchronousRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                    &lt;span class=&quot;nl&quot;&gt;reduceEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURLResponse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UIImage&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;imageWithData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;deliverOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACScheduler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mainThreadScheduler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Something still isn&amp;#39;t right, but it&amp;#39;s very hard to deduce what is wrong. I did see &lt;code&gt;-[UIImageView setImage:] + 316&lt;/code&gt; in the stack trace, so I feel like I am on the right track; it just looks like either it&amp;#39;s not an image being set on it or something else is awry. And unfortunately, setting a breakpoint on the line with the statement &lt;code&gt;[UIImage imageWithData:data]&lt;/code&gt; never gets called. I gave an amateur shot at some lldb spelunking, but it went much slower than what I was used to and I never got anywhere. The next step is to take some time to learn about the missing pieces and find a working solution.&lt;/p&gt;

&lt;h3&gt;Attempt 27&lt;/h3&gt;

&lt;p&gt;This time I decided to take a step back. I didn&amp;#39;t &lt;em&gt;need&lt;/em&gt; the images to be asynchronously loaded in order to display them. The simplest way that I was sure would work, was to use good ol&amp;#39; &lt;code&gt;+[NSData dataWithContentsOfURL:]&lt;/code&gt;. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;span class=&quot;n&quot;&gt;RAC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;posterImageView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACObserve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;movie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;posterURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UIImage&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;imageWithData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSData&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;dataWithContentsOfURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Success! It was, of course, slow, but it worked.&lt;/p&gt;

&lt;h3&gt;Attempt 342&lt;/h3&gt;

&lt;p&gt;Since I had a synchronous solution, my next attempt was to see if I could turn it into an asynchronous solution. From what I&amp;#39;ve gathered, &lt;code&gt;deliverOn:[RACScheduler scheduler]&lt;/code&gt; will create a signal that delivers subsequent events on a background thread, and &lt;code&gt;deliverOn:[RACScheduler mainThreadScheduler]&lt;/code&gt; will deliver events on the main thread. In the spirit of Reactive Cocoa, I combined the two and came up with this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;span class=&quot;n&quot;&gt;RAC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;posterImageView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACObserve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;movie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;posterURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;deliverOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACScheduler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scheduler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSData&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;dataWithContentsOfURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;deliverOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACScheduler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mainThreadScheduler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UIImage&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;imageWithData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I finally landed a way to asynchronously load images to populate tableview cells, but I&amp;#39;m not settling on this solution because &lt;code&gt;+[UIImage imageWithData]&lt;/code&gt; can be slow.&lt;/p&gt;

&lt;h3&gt;Attempt N&lt;/h3&gt;

&lt;p&gt;In my efforts to find the Holy Grail of how to go about asycnrhonously loading images using Reactive Cocoa, I stumbled across a very interesting &lt;a href=&quot;https://github.com/ReactiveCocoa/ReactiveViewModel/issues/16&quot;&gt;GitHub issue&lt;/a&gt;.² The gentleman in this thread appears to have a working solution using &lt;code&gt;+[NSURLConnection rac_sendAsynchronousRequest:]&lt;/code&gt;, but is struggling with a higher level problem. Ash Furrow chimed in on the thread referencing an &lt;a href=&quot;https://github.com/ashfurrow/FunctionalReactivePixels/issues/27&quot;&gt;issue&lt;/a&gt; from his project to see a different solution.³ The code in their dicsussion started out like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;span class=&quot;n&quot;&gt;RAC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imageView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACObserve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;photoModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thumbnailData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;ignore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACSignal&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;createSignal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACDisposable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACSubscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACScheduler&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;schedulerWithPriority&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACSchedulerPriorityHigh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;af_decompressedImageFromJPEGDataWithCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UIImage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decompressedImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;sendNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decompressedImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sendCompleted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;switchToLatest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What&amp;#39;s interesting is that they are creating and returning a signal within their &lt;code&gt;map:&lt;/code&gt; block, as opposed to decompressing on the main thread and returning a value object. It makes me wonder why the examples I&amp;#39;ve seen didn&amp;#39;t have to do that, and simply chaining it with &lt;code&gt;reduceEach:&lt;/code&gt; was good enough.&lt;/p&gt;

&lt;p&gt;When discussing cancelling the background operation, &lt;a href=&quot;https://github.com/kastiglione&quot;&gt;Dave Lee&lt;/a&gt; chimed in, &amp;quot;You could use &lt;code&gt;-subscribeOn:&lt;/code&gt; which also takes care of handling cancelation. Even if you don&amp;#39;t, since &lt;code&gt;-schedule:&lt;/code&gt; returns a disposable, which can be returned as the result of &lt;code&gt;+createSignal:&lt;/code&gt;.&amp;quot;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;    &lt;span class=&quot;n&quot;&gt;RAC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imageView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACObserve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;photoModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thumbnailData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;ignore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACSignal&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;createSignal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACDisposable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACSubscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;af_decompressedImageFromJPEGDataWithCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UIImage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decompressedImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;sendNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decompressedImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sendCompleted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;subscribeOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACScheduler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scheduler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;switchToLatest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;switchToLatest&lt;/code&gt; is new to me, and a quick look at the docs says that it &amp;quot;Returns a signal which passes through &lt;code&gt;next&lt;/code&gt;s and &lt;code&gt;error&lt;/code&gt;s from the latest signal sent by the receiver, and sends &lt;code&gt;completed&lt;/code&gt; when both the receiver and the last sent signal complete.&amp;quot; My best guess is since the subscriber of the image is now subscribing to a signal-returning-a-signal, the &lt;code&gt;switchToLatest&lt;/code&gt; will ensure that the original subscriber will be sent the &lt;code&gt;next&lt;/code&gt; event which will contain a value object: the decompressed &lt;code&gt;UIImage&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I never did return to this problem, and left the slower implementation in the code. There are bigger things ahead, and I don&amp;#39;t want this one to slow me down any more. If anyone reading this can steer me in the right direction, I&amp;#39;d appreciate it!&lt;/p&gt;

&lt;h3&gt;References&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ashfurrow/FunctionalReactivePixels/blob/aef9b670ec5f14d496049c9e214f99513ca579df/FRP/FRPPhotoImporter.m#L46-L58&quot;&gt;[1] Functional Reactive Pixels - FRPPhotoImporter.m:L46-58&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ReactiveCocoa/ReactiveViewModel/issues/16&quot;&gt;[2] Binding asynchronously loaded images from a view-model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ashfurrow/FunctionalReactivePixels/issues/27&quot;&gt;[3] Bad scrolling performance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Wed, 07 Jan 2015 00:00:00 -0600</pubDate>
				<link>http://marksands.github.io/2015/1/7/reacting-to-reactive-cocoa-part-iii.html</link>
				<guid isPermaLink="true">http://marksands.github.io/2015/1/7/reacting-to-reactive-cocoa-part-iii.html</guid>
			</item>
		
			<item>
				<title>Reacting to Reactive Cocoa Part II</title>
				<description>&lt;h3&gt;Baby&amp;#39;s First Monad&lt;/h3&gt;

&lt;p&gt;Since this is an app designed to pull down recent showtime listings from the Internet¹, I realized I&amp;#39;d need a network request in order to fetch the data and populate a listing of showtimes. In this case, a simple array to populate a tableview with the movies that are playing for each theater. I didn&amp;#39;t want to waste time building the entire API before digging into the app, so I spun up a dummy heroku instance to return some hard coded values. At this point, my muscle memory is nearly wired to pull in something like AFNetworking and start making GET requests. Before I knew it, I had a podfile and a view model ready to go; but quickly realized that I&amp;#39;m supposed to be doing this the Reactive Cocoa way.&lt;/p&gt;

&lt;p&gt;Without much searching around, I decided to place my best foot forward and see how far I could get without tripping. From what I&amp;#39;ve seen in the past, the macro &lt;code&gt;RAC&lt;/code&gt; will magically populate an object with data by assigning it to something called a &lt;code&gt;RACSignal&lt;/code&gt;. So that&amp;#39;s where I began: &lt;code&gt;RAC(self, movies) = [self fetchMoviesSignal];&lt;/code&gt; Now I just needed to see what this &lt;code&gt;fetchMoviesSignal&lt;/code&gt; entailed.&lt;/p&gt;

&lt;h3&gt;RACSignal&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;RACSignal&lt;/code&gt; appears to be the workhorse of reactive cocoa. When inspecting the headers, we&amp;#39;re told that &lt;code&gt;RACSignal&lt;/code&gt; inherits from &lt;code&gt;RACStream&lt;/code&gt;, which is &lt;em&gt;a class that represents a monad, upon which many stream-based operations can be built&lt;/em&gt; (it looks complicated, so I closed the header to regain my attention).&lt;/p&gt;

&lt;p&gt;Since I already had AFNetworking imported, I decided to expirment with wrapping it in a new signal object. As it turns out, it was fairly straightforward. This is what I ended up with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACSignal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetchMoviesSignal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACSignal&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;createSignal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACDisposable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RACSubscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AFHTTPRequestOperationManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;movieapi.com/showtimes&amp;quot;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AFHTTPRequestOperation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;operation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;sendNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sendCompleted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;failure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AFHTTPRequestOperation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;operation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;sendError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Before I got here, I had to ask myself what a subscriber was. The documentation for the subscriber states that it &lt;em&gt;represents any object which can directly receive values from a RACSignal&lt;/em&gt;. The header file for the &lt;code&gt;RACSubscriber&lt;/code&gt; protocol was actually very informative.&lt;a href=&quot;https://github.com/ReactiveCocoa/ReactiveCocoa/blob/a6bc3a918de10c0310f10185fd5eca72d285742c/ReactiveCocoa/RACSubscriber.h&quot;&gt;²&lt;/a&gt; &lt;code&gt;sendNext:&lt;/code&gt;, &lt;code&gt;sendCompleted&lt;/code&gt;, and &lt;code&gt;sendError:&lt;/code&gt; all made perfect sense to me at the time. When I built and ran, and saw that my movies array was populated with the JSON response from the GET request, I felt all warm and fuzzy.&lt;/p&gt;

&lt;p&gt;Even though I didn&amp;#39;t accomplish much, I took quite some time before arriving at this. I did a lot of reading the header files and other blog posts I came across to make sure I wasn&amp;#39;t way off track. I think next time I will try to bite off a little more and see what all I can accomplish in the UI. I&amp;#39;ll need to populate my table with the showtimes and movie posters, so it sounds like I have my work cut out for me yet!&lt;/p&gt;

&lt;h3&gt;References&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;marksands.github.io/2014/12/30/reacting-to-reactive-cocoa-part-i.html&quot;&gt;[1] Reacting to Reactive Cocoa Part I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ReactiveCocoa/ReactiveCocoa/blob/a6bc3a918de10c0310f10185fd5eca72d285742c/ReactiveCocoa/RACSubscriber.h&quot;&gt;[2] RACSubscriber.h&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Fri, 02 Jan 2015 00:00:00 -0600</pubDate>
				<link>http://marksands.github.io/2015/1/2/reacting-to-reactive-cocoa-part-ii.html</link>
				<guid isPermaLink="true">http://marksands.github.io/2015/1/2/reacting-to-reactive-cocoa-part-ii.html</guid>
			</item>
		
			<item>
				<title>Reacting to Reactive Cocoa Part I</title>
				<description>&lt;h3&gt;RAC Diary&lt;/h3&gt;

&lt;p&gt;In the vain of Brent Simmons&amp;#39; &lt;a href=&quot;http://inessential.com/2013/10/01/vesper_sync_diary_1&quot;&gt;Vesper Sync Diary&lt;/a&gt;¹, my plan is to express my thoughts about learning Reactive Cocoa as I build an app from scratch using the framework. The app will be an iPhone targeted app that will serve as a feed to show current movie theater showtimes of a local movie theater from my home town. I&amp;#39;m using this as an opportunity to get my feet wet with reactive cocoa and to see what all the fuss is about.&lt;/p&gt;

&lt;p&gt;I really hope to make this more of an engaging opportunity to get support from the community as I will undoubtedly make many mistakes along the way. If you&amp;#39;re coming here to learn about reactive cocoa, you may be at the wrong place, but who knows, maybe we&amp;#39;ll both learn something together.&lt;/p&gt;

&lt;h3&gt;MVVM Introduction&lt;/h3&gt;

&lt;p&gt;For starters, Bob Spryn&amp;#39;s recent blog post &lt;em&gt;ReactiveCocoa and MVVM, an Introduction&lt;/em&gt;&lt;a href=&quot;http://www.sprynthesis.com/2014/12/06/reactivecocoa-mvvm-introduction/&quot;&gt;²&lt;/a&gt; is enough to keep me busy for a few days. I will spend my time soaking this up and speak more to it later. Only good things can come from this!&lt;/p&gt;

&lt;h3&gt;References&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://inessential.com/2013/10/01/vesper_sync_diary_1&quot;&gt;[1] Vesper Sync Diary #1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sprynthesis.com/2014/12/06/reactivecocoa-mvvm-introduction/&quot;&gt;[2] ReactiveCocoa and MVVM, an Introduction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Tue, 30 Dec 2014 00:00:00 -0600</pubDate>
				<link>http://marksands.github.io/2014/12/30/reacting-to-reactive-cocoa-part-i.html</link>
				<guid isPermaLink="true">http://marksands.github.io/2014/12/30/reacting-to-reactive-cocoa-part-i.html</guid>
			</item>
		
			<item>
				<title>2015 Goals</title>
				<description>&lt;h3&gt;2015 Goals&lt;/h3&gt;

&lt;p&gt;As the new year approaches, I&amp;#39;ve began to think of some goals of mine. Rather than make goals, I&amp;#39;ve always tried to improve on an as-needed basis; why wait till the beginning of the new year? It&amp;#39;s close enough to the new year this time that I am willing to make an exception and wait a few days. Here are 3 goals of mine that I wish to accomplish over the following 12 months.&lt;/p&gt;

&lt;h4&gt;1. Take Piano Lessons&lt;/h4&gt;

&lt;p&gt;My first goal is to re-enroll in piano lessons. I took piano growing up until I graduated high school and moved away from my hometown piano teacher. I&amp;#39;ve missed playing the piano and often wish I was back up to speed to be able to entertain my wife and kids. I&amp;#39;ve already started searching for a teach in or near my neighborhood. Here&amp;#39;s hoping it works out soon!&lt;/p&gt;

&lt;h4&gt;2. Learn to Knit&lt;/h4&gt;

&lt;p&gt;The second goal of mine is to learn how to knit. I&amp;#39;ve been recently amazed at the crafts that my friends and relatives have made, especially over the Christmas season. Being able to make your own clothes and accessories is such a valuable skill to posess. It seems so obvious that everyone should learn how to at least sew or knit, especially when the creative juices start flowing as you open your closet door. This one will definitely be the most challenging goal of mine, so any tips for good resources to learn is appreciated.&lt;/p&gt;

&lt;h4&gt;3. Play Chess&lt;/h4&gt;

&lt;p&gt;My final goal is to play chess. I&amp;#39;m not aiming to be a great chess player, as the goal of the game is to win, so hopefully I do that the majority of the time. I know the rules of the game and I&amp;#39;ve played at times, but I am a terrible chess player. When I play chess, I find myself rushing the moves and not thinking or pacing myself enough to be aware of my surroundings. I relate this very closely to software craftsmanship, garnering patience and awareness of the system architecture. What I want out of playing chess is really to learn to be more patient. Hopefully after a while, I will learn to be more patient on my tasks and be more focused because of it.&lt;/p&gt;
</description>
				<pubDate>Mon, 29 Dec 2014 00:00:00 -0600</pubDate>
				<link>http://marksands.github.io/2014/12/29/2015-goals.html</link>
				<guid isPermaLink="true">http://marksands.github.io/2014/12/29/2015-goals.html</guid>
			</item>
		
			<item>
				<title>Pragma Poison</title>
				<description>&lt;h3&gt;stringValue&lt;/h3&gt;

&lt;p&gt;It can be tempting to convert NSNumbers to strings by calling &lt;code&gt;stringValue&lt;/code&gt;. It&amp;#39;s definitely less verbose than creating an NSNumberFormatter, specifying the number style, removing the grouping separator, and any other setup that&amp;#39;s necessary. You may think calling &lt;code&gt;[@8.8 stringValue]&lt;/code&gt; returns &amp;quot;8.8&amp;quot;, but you&amp;#39;d be wrong; it actually returns &amp;quot;8.800000000000001&amp;quot;. Let&amp;#39;s take a look at what&amp;#39;s going on behind the scenes when we call stringValue to find out why this is happening.&lt;/p&gt;

&lt;h3&gt;Behind the Scenes&lt;/h3&gt;

&lt;p&gt;According to Apple&amp;#39;s documentation regarding &lt;code&gt;stringValue&lt;/code&gt;:&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSNumber_Class/Reference/Reference.html#//apple_ref/occ/instm/NSNumber/stringValue&quot;&gt;¹&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;The string is created by invoking descriptionWithLocale: where locale is nil.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So far so good. Let&amp;#39;s see what &lt;code&gt;descriptionWithLocale:nil&lt;/code&gt; is doing. Also according to Apple&amp;#39;s documentation:&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSNumber_Class/Reference/Reference.html#//apple_ref/occ/instm/NSNumber/descriptionWithLocale:&quot;&gt;²&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;To obtain the string representation, this method invokes NSString’s initWithFormat:locale: method, 
supplying the format based on the type the NSNumber object was created with:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and goes on to list the format specifiers that the NSNumber value is casted to. From the chart, we can see that a double gets &lt;code&gt;%0.16g&lt;/code&gt; as the format specifier.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s take what we&amp;#39;ve found and turn it into a single method call. So, &lt;code&gt;[@8.8 stringValue]&lt;/code&gt; actually becomes &lt;code&gt;[[NSString alloc] initWithFormat:@&amp;quot;%.16g&amp;quot; locale:nil, 8.8]&lt;/code&gt;. Now it makes sense why we are getting 16 digits instead of 2! Floating point conversion isn&amp;#39;t perfect, so that&amp;#39;s why we see some numbers like 8.8 become &amp;quot;8.800000000000001&amp;quot; and others such as 8.9 become &amp;quot;8.9&amp;quot;.&lt;/p&gt;

&lt;h3&gt;#pragma GCC poison stringValue&lt;/h3&gt;

&lt;p&gt;The bottom line is, in most cases, you never want 16 digits when converting simple doubles into a string. So now that we&amp;#39;ve deduced how &lt;code&gt;stringValue&lt;/code&gt; can turn a 2 digit number into a 16 digit number, how do we prevent our peers from using this API? I came across a &lt;a href=&quot;http://stackoverflow.com/questions/17031349/how-do-i-mark-a-uikit-class-or-method-as-deprecated&quot;&gt;stackoverflow post&lt;/a&gt; for my answer. I tried a similar approach with creating a category and assigning &lt;code&gt;UNAVAILABLE_ATTRIBUTE&lt;/code&gt;, but that wasn&amp;#39;t working for me either.&lt;a href=&quot;http://stackoverflow.com/questions/17031349/how-do-i-mark-a-uikit-class-or-method-as-deprecated&quot;&gt;³&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It turns out GCC originally provided a solution to this problem to poison certain identifiers. Thankfully clang has adopted this protocol as well. The posion pragma is designed to work with C symbols, but you can leave off the colon of your selector to make it work with Objective-C. Finally, all you need to do now is add &lt;code&gt;#pragma GCC poison stringValue&lt;/code&gt; in your precompiled header and start replacing those calls with &lt;code&gt;NSNumberFormatter&lt;/code&gt;!&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;#pragma GCC poison stringValue

ClassUsingStringValue.m:62:12: Attempt to use a poisoned identifier
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;References&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSNumber_Class/Reference/Reference.html#//apple_ref/occ/instm/NSNumber/stringValue&quot;&gt;[1] stringValue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSNumber_Class/Reference/Reference.html#//apple_ref/occ/instm/NSNumber/descriptionWithLocale:&quot;&gt;[2] descriptionWithLocale:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/17031349/how-do-i-mark-a-uikit-class-or-method-as-deprecated&quot;&gt;[3] stackoverflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Thu, 16 Oct 2014 00:00:00 -0500</pubDate>
				<link>http://marksands.github.io/2014/10/16/pragma-poison.html</link>
				<guid isPermaLink="true">http://marksands.github.io/2014/10/16/pragma-poison.html</guid>
			</item>
		
			<item>
				<title>Aviator</title>
				<description>&lt;h4&gt;Aviator&lt;/h4&gt;

&lt;p&gt;Recently, I became interested in the process of building Xcode plugins, digging into the private headers, using hopper to dissect the framework, and experimenting with the existing plugins already available on the web. I switch back and forth quite a bit between AppCode and Xcode, mainly  using AppCode for its superior refactoring tools. Besides refactoring tools, AppCode has a lot of great shortcuts that I wish Xcode has. ⌥↩ adds missing imports and ⇧⌘T toggles between unit tests and source files. &lt;a href=&quot;https://github.com/markohlebar/Peckham&quot;&gt;Peckham&lt;/a&gt; is a plugin that already exists and does a decent job at adding missing imports, though I wish it was as simple as ⌥↩. That left me with ⇧⌘T as a good intro to Xcode plugin creation. If you&amp;#39;re interested in how to get started creating Xcode plugins, Artsy has a &lt;a href=&quot;http://artsy.github.io/blog/2014/06/17/building-the-xcode-plugin-snapshots/&quot;&gt;great blog post&lt;/a&gt;&lt;a href=&quot;http://artsy.github.io/blog/2014/06/17/building-the-xcode-plugin-snapshots/&quot;&gt;¹&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I spent an evening experiementing, and, within a few hours, &lt;a href=&quot;https://github.com/marksands/Aviator/&quot;&gt;Aviator&lt;/a&gt; was born. Aviator currently only supports the ⇧⌘T shortcut to toggle between a unit test and its source file counterpart. I&amp;#39;d like to extend Aviator to add more missing Xcode shortcuts, so expect more from this in the future. I&amp;#39;m looking for ideas on what to add next, so let me know and I&amp;#39;ll see what I can do&lt;a href=&quot;https://github.com/marksands/Aviator/&quot;&gt;²&lt;/a&gt;!&lt;/p&gt;

&lt;h3&gt;References&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://artsy.github.io/blog/2014/06/17/building-the-xcode-plugin-snapshots/&quot;&gt;[1] Building the Xcode Plugin Snapshots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/marksands/Aviator/&quot;&gt;[2] Aviator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Fri, 26 Sep 2014 00:00:00 -0500</pubDate>
				<link>http://marksands.github.io/2014/09/26/aviator.html</link>
				<guid isPermaLink="true">http://marksands.github.io/2014/09/26/aviator.html</guid>
			</item>
		
			<item>
				<title>Effective Pair Programming</title>
				<description>&lt;h4&gt;Episode 3 - Effective Pair Programming&lt;/h4&gt;

&lt;p&gt;The ongoing effort by &lt;a href=&quot;http://www.effectiveprogramming.com/&quot;&gt;Effective Programming&lt;/a&gt; continues the saga with another episode, this time with a discussion around the pros and cons of pair programming. We talk about buying houses, Top Gun, and playing Warcraft III. Check it out! &lt;a href=&quot;https://itunes.apple.com/us/podcast/effective-programming-podcast/id878947397?mt=2&quot;&gt;Effective Pair Programming&lt;/a&gt;.&lt;/p&gt;
</description>
				<pubDate>Fri, 30 May 2014 00:00:00 -0500</pubDate>
				<link>http://marksands.github.io/2014/05/30/effective-pair-programming.html</link>
				<guid isPermaLink="true">http://marksands.github.io/2014/05/30/effective-pair-programming.html</guid>
			</item>
		
			<item>
				<title>How Apple Cheats</title>
				<description>&lt;p&gt;As every iOS developer knows, Apple can do whatever they want with their own native apps, meaning they can and do use private APIs. It&amp;#39;s not too surprising, after all, it is their domain and they are in control. However, Apple&amp;#39;s overuse of private APIs can make third-party apps second-class citizens; iBooks is notorious of such private API abuse&lt;a href=&quot;http://www.marco.org/2010/04/06/ibooks-and-private-apis&quot;&gt;¹&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;UIPopoverController on the iPhone&lt;/h3&gt;

&lt;p&gt;One UIKit component iBooks uses is UIPopoverController. This is frustrating because UIPopoverController is reservered for iPad development only. So how does iBooks implement an iPod/iPhone compatible UIPopoverController? I &lt;a href=&quot;http://marksands.github.io/2014/01/03/inspecting-third-party-apps.html&quot;&gt;inspected&lt;/a&gt; iBooks on a jailbroken iPod touch to verify that the popover was in fact the UIPopoverController class and not a cheap replacement. To be sure I wasn&amp;#39;t crazy, I created a new iOS project targeted for iPhone and spun up a quick &lt;code&gt;UIPopoverController&lt;/code&gt; Hello World app. Sure enough, it crashed &lt;code&gt;-[UIPopoverController initWithContentViewController:] called when not running under UIUserInterfaceIdiomPad.&lt;/code&gt; If this is true, then how on earth is Apple getting around this?&lt;/p&gt;

&lt;h3&gt;The Secret Sauce&lt;/h3&gt;

&lt;p&gt;In order to find out Apple&amp;#39;s secret sauce, I opened &lt;a href=&quot;http://www.hopperapp.com/&quot;&gt;Hopper&lt;/a&gt; to dig a little deeper. Here&amp;#39;s sort of what Apple&amp;#39;s code &lt;s&gt;may look like&lt;/s&gt; looks like under the covers when creating a UIPopoverController.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;initWithContentViewController:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;viewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(([[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UIDevice&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentDevice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;respondsToSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userInterfaceIdiom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UIDevice&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentDevice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userInterfaceIdiom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIUserInterfaceIdiomPad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UIPopoverController&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_popoversDisabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;              &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSException&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;raise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSInvalidArgumentException&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;-[UIPopoverController initWithContentViewController:] called when not running under UIUserInterfaceIdiomPad.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see, they are definitely checking to make sure the current device is an iPad, otherwise it will raise an exception. But wait, what&amp;#39;s this private class method &lt;code&gt;_popoversDisabled&lt;/code&gt;? Let&amp;#39;s open that up to find out.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;_popoversDisabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;     &lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundleIdentifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSBundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mainBundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundleIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundleIdentifier&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;isEqualToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;com.apple.iBooks&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundleIdentifier&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;isEqualToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;com.apple.mobilesafari&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundleIdentifier&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;isEqualToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;com.apple.itunesu&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundleIdentifier&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;isEqualToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;com.apple.Maps&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt;       &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;7&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Say what?! Did Apple seriously grant access to four of their native apps by hardcoding their bundle identifiers? Yep, they sure did².&lt;/p&gt;

&lt;p&gt;In fact, you don&amp;#39;t have to do anything special to verify this. If you change your &lt;code&gt;UIPopoverController&lt;/code&gt; Hello World project&amp;#39;s Info.plist bundle identifier to &lt;code&gt;com.apple.iBooks&lt;/code&gt; or &lt;code&gt;com.apple.itunesu&lt;/code&gt;, then voilà, It works!&lt;/p&gt;

&lt;h3&gt;What now?&lt;/h3&gt;

&lt;p&gt;It&amp;#39;s interesting to see how Apple bends the rules for their benefit, but I think there is something more telling here. The fact of the matter is, &lt;code&gt;UIPopoverController&lt;/code&gt; works on the iPhone and iPod touch out of the box. Apple simply has it locked down for now. Will iOS 8 finally bring &lt;code&gt;UIPopoverController&lt;/code&gt; support to the iPhone and iPod touch? One can hope! At least we only have to wait until next week to find out.&lt;/p&gt;

&lt;h3&gt;References&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.marco.org/2010/04/06/ibooks-and-private-apis&quot;&gt;[1] iBooks and Private APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[2] +[UIPoverController _popoversDisabled] My rudimentary debugging skills must note that it&amp;#39;s possible I overlooked something and more apps have their hands untied than just these four&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Tue, 27 May 2014 00:00:00 -0500</pubDate>
				<link>http://marksands.github.io/2014/05/27/how-apple-cheats.html</link>
				<guid isPermaLink="true">http://marksands.github.io/2014/05/27/how-apple-cheats.html</guid>
			</item>
		
	</channel>
</rss>